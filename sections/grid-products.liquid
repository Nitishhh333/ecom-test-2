{{ 'component-card.css' | asset_url | stylesheet_tag }}
<script>
  const addToCart = (id) => {
    let formData = {
      'items': [{
      'id': id,
      'quantity': 1
      },
      {
      'id': 45491510116514,
      'quantity': 1
      }]
    };
    const button = document.querySelector('.custom-quick-add');
    button.classList.add('loading-active');
    button.disabled = true;
    fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      return response.json();
    })
    .catch((error) => {
      console.error('Error:', error);
    })
    .finally(()=> {
      button.classList.remove('loading-active')
      button.textContent = 'Successfully Added to cart...'
      button.style.background="green"
      setTimeout(() => {
        button.textContent = 'Add to cart'
        button.style.background="black"
        button.disabled = false;
      }, 2000);

    })
  }
  const changeOptions = (product) => {
    const optionIS = document.querySelectorAll(".main-options input,.main-options select");
    optionIS.forEach((e) => {
      e.addEventListener("change",(evt) => {
        const checkedColor = document.querySelectorAll(".main-options input:checked")[0]?.value || null;
        const checkedSize = document.querySelectorAll(".main-options select")[0]?.value || null;
        if(checkedColor && checkedSize){
          const checkedValue = checkedSize + ' / ' + checkedColor;
          const proInfo = document.querySelector(".pro-information .all_variants_main input[data-title='" + checkedValue + "']");
          document.querySelector(".custom-quick-add").dataset.id = proInfo.value;
          const priceElement = document.querySelector(".pro-information .price");
          if (priceElement) {
            const variant = product.variants.find(v => parseInt(v.id) === parseInt(proInfo.value));
            priceElement.textContent = variant.price;
          }
          document.querySelector(".custom-quick-add").addEventListener("click", (e) => {
            const variantIid = Number(e.target.dataset.id);
            addToCart(variantIid);
          })
        }
      })
    })
  }
  const createHiddenVariantsHtml = (product) => {
    let variantWrapper = document.createElement("div");
    let variantDiv = document.createElement("div");
    variantDiv.setAttribute("class", "all_variants_main")
    product.variants.forEach((e) => {
      let variantInput = document.createElement("input");
      variantInput.type = "hidden";
      variantInput.value = e.id;
      variantInput.name = "variant";
      variantInput.dataset.title = e.title;
      variantDiv.appendChild(variantInput);
    }) 
    variantWrapper.appendChild(variantDiv);
    return variantWrapper;
  }
  const createOptionsHtml = (product) => {
    let variantOptions = document.createElement("div");
    variantOptions.setAttribute("class",`main-options`);
    product.options.forEach((option) => {
      let wrapper = document.createElement("div");
      let label = document.createElement("h6");
      wrapper.classList.add(`option-${option.name}`);
      label.textContent = option.name;
      wrapper.appendChild(label);
      if (option.name.toLowerCase() === "color") {
        let colorContainer = document.createElement("div");
        colorContainer.className = "color-swatches";
        option.values.forEach((value, index) => {
          let input = document.createElement("input");
          input.type = "radio";
          input.name = option.name;
          input.value = value;
          input.id = `${option.name}-${index}`;
          
          let colorBox = document.createElement("label");
          colorBox.className = `color-box`;
          colorBox.style.borderLeftColor = value.toLowerCase();
          colorBox.textContent = value;
          colorBox.setAttribute("for", input.id);
          colorContainer.appendChild(input);
          colorContainer.appendChild(colorBox);
        });
        wrapper.appendChild(colorContainer);
      }else if(option.name.toLowerCase() === "size"){
        let select = document.createElement("select");
        select.name = option.name;
        option.values.forEach((value) => {
        let opt = document.createElement("option");
        opt.value = value;
        opt.textContent = value;
        select.appendChild(opt);
        });
        wrapper.appendChild(select);
      }else{
        let container = document.createElement("div");
        option.values.forEach((value, index) => {
          let input = document.createElement("input");
          input.type = "radio";
          input.name = option.name;
          input.value = value;
          input.id = `${option.name}-${index}`;

          let label = document.createElement("label");
          label.setAttribute("for", input.id);
          label.textContent = value;

          container.appendChild(input);
          container.appendChild(label);
        });
        wrapper.appendChild(container);
      }
      variantOptions.appendChild(wrapper);
    })
    return variantOptions;
  }
  
  const openPopup = (quickView) => {
    quickView.forEach((button) => {
      button.addEventListener("click", function (evt) {
        const productHandle = evt.target.dataset.handle;
        fetch(`/products/${productHandle}.json`).then((response)=>{
          return response.json()
        }).then(({product}) => {
          const quickViewPopup = document.querySelector(".quickview_popup")
          const quickViewInnerPopup = document.querySelector(".quickview_popup .quickview_pro_inner")
          
          // create variant html with input
          const variantHtml = createHiddenVariantsHtml(product);
          // end
          
          // create variant options
          const optionWrapper = document.createElement("div");
          const optionHtml = createOptionsHtml(product);
          optionWrapper.appendChild(optionHtml);
          // end

          // append all html
          let html = `
          <button class="quickview-close" aria-label="Close quickview">Ã—</button>

            <div class="product-main">
              <div class="product-media">
                <img src="${product.image.src}" alt="${product.handle}">
              </div>
              <div class="pro-information">
                ${variantHtml.innerHTML}
                <h5>${product.title}</h5>
                <p class="price">${product.variants[0].price}</p>
                <p>${product.body_html}</p>
              </div>
            </div>
            ${optionWrapper.innerHTML}
            <button type="button" data-id="" class="custom-quick-add">Add to cart <span class="loading">
              {{ 'loading-spinner.svg' | inline_asset_content }}
            </span></button>
            
          `;
          quickViewInnerPopup.innerHTML = html;
          quickViewPopup.classList.add("active");
          // end
          changeOptions(product);
        })
      })
    })
  }
  document.addEventListener('DOMContentLoaded', function () {
    const quickView = document.querySelectorAll(".custom-quickview");
    openPopup(quickView)
    document.addEventListener("click", function (e) {
      if (e.target.classList.contains("quickview-close")) {
        
        document.querySelector(".quickview_pro_inner").innerHTML = ''; // Or your actual popup show class
        document.querySelector(".quickview_popup").classList.remove("active"); // Or your actual popup show class
      }
    });
  });
</script>
{% style %}
.custom-quickview {
  position: absolute;
  bottom: 12px;
  right: 12px;
  background: #fff;
  color: #000;
  border: none;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 5;
  cursor: pointer;
  transition: background 0.3s ease;
}

.custom-quickview:hover  {
  background: #333;
  color: #fff
}

.media {
  position: relative; /* Ensure positioning context for absolute button */
}

.quickview_pro_inner {
  position: relative;
}
  .quickview-close{
    position: absolute;
    top: 10px;
    right: 10px;
    background: #fff;
    border: 1px solid #ccc;
    font-size: 20px;
    line-height: 1;
    padding: 4px 10px;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    transition: background 0.3s ease;
  }
  .quickview_popup.active {
    position: fixed;
    z-index: 9999;
    width: 90%;
    max-width: 800px;
    background: #fff;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    overflow-y: auto;
    max-height: 90vh;
    padding: 24px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    border-radius: 12px;
    font-family: 'Helvetica Neue', sans-serif;
  }
  
  .product-main {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  @media (min-width: 768px) {
    .product-main {
      flex-direction: row;
    }
  }
  
  .product-media {
    flex: 1;
    text-align: center;
  }
  
  .product-media img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }
  
  .pro-information {
    flex: 1;
  }
  
  .pro-information h5 {
    font-size: 20px;
    margin: 10px 0 5px;
  }
  
  .pro-information .price {
    font-weight: bold;
    font-size: 18px;
    color: #2c3e50;
    margin-bottom: 10px;
  }
  
  .pro-information p {
    font-size: 14px;
    color: #555;
    margin-bottom: 16px;
  }
  
  .main-options {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  
  .main-options > div {
    width: 100%;
  }
  
  .main-options h6 {
    font-size: 14px;
    font-weight: 600;
    margin: 10px 0 5px;
  }
  
  .color-swatches {
  display: flex;
  flex-wrap: wrap;
}

.color-swatches input[type="radio"] {
  display: none;
}

.color-box {
  width: 110px;
  background-color: #fff;
  border: 1px solid #ccc;
  border-left-width: 8px; /* Thicker left border for color */
  /* border-radius: 6px; */
  cursor: pointer;
  position: relative;
  transition: border-color 0.2s ease;
  box-sizing: border-box;
  padding: 10px
}

input[type="radio"]:checked + .color-box {
  border-color: #000;
  background: #000;
  color: #fff;
}

.color-box::after {
  content: attr(data-color-label);
  position: absolute;
  top: 100%;
  left: 50%;
  transform: translateX(-50%);
  font-size: 12px;
  margin-top: 4px;
  color: #333;
  white-space: nowrap;
}

  
  .main-options select {
    width: 100%;
    padding: 8px;
    border-radius: 6px;
    border: 1px solid #ccc;
  }
  
  .custom-quick-add {
  background-color: #111;
  color: #fff;
  border: none;
  padding: 12px 20px;
  font-weight: 600;
  cursor: pointer;
  border-radius: 6px;
  transition: background-color 0.3s ease;
  width: 100%;
  margin-top: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  position: relative;
}

.custom-quick-add .loading {
  display: none;
  width: 20px;
  height: 20px;
}

.custom-quick-add .spinner {
  width: 100%;
  height: 100%;
  animation: spin 1s linear infinite;
}

.custom-quick-add .path {
  stroke: #fff;
  stroke-linecap: round;
}

.custom-quick-add.loading-active .btn-text {
  display: none;
}

.custom-quick-add.loading-active .loading {
  display: inline-block;
}

@keyframes spin {
  100% {
    transform: rotate(360deg);
  }
}

  
  .custom-quick-add:hover {
    background-color: #333;
  }
  {% endstyle %}
    

<div class="page-width-desktop">
    <h2 class="title inline-richtext">
        {{ section.settings.heading }}
    </h2>
    <ul
        class="grid product-grid contains-card contains-card--product contains-card--standard grid--3-col-desktop grid--2-col-tablet-down"
        role="list"
    >
    {%- for block in section.blocks -%}
        {%- case block.type -%}
            {%- when 'product_select' -%}
                {%  assign card_product = all_products[block.settings.product]   %}
                {% assign ratio = 1 %}
                <li class="grid__item scroll-trigger animate--slide-in">
                    <div class="card-wrapper product-card-wrapper underline-links-hover">
                        <div class="card card--standard card--media" style="--ratio-percent: {{ 1 | divided_by: ratio | times: 100 }}%;">
                            <div class="card__inner color-scheme-2 gradient ratio" style="--ratio-percent: {{ 1 | divided_by: ratio | times: 100 }}%;">
                                <div class="card__media">
                                    <div class="media media--transparent media--hover-effect">
                                        <img
                                            srcset="
                                            {%- if card_product.featured_media.width >= 165 -%}{{ card_product.featured_media | image_url: width: 165 }} 165w,{%- endif -%}
                                            {%- if card_product.featured_media.width >= 360 -%}{{ card_product.featured_media | image_url: width: 360 }} 360w,{%- endif -%}
                                            {%- if card_product.featured_media.width >= 533 -%}{{ card_product.featured_media | image_url: width: 533 }} 533w,{%- endif -%}
                                            {%- if card_product.featured_media.width >= 720 -%}{{ card_product.featured_media | image_url: width: 720 }} 720w,{%- endif -%}
                                            {%- if card_product.featured_media.width >= 940 -%}{{ card_product.featured_media | image_url: width: 940 }} 940w,{%- endif -%}
                                            {%- if card_product.featured_media.width >= 1066 -%}{{ card_product.featured_media | image_url: width: 1066 }} 1066w,{%- endif -%}
                                            {{ card_product.featured_media | image_url }} {{ card_product.featured_media.width }}w
                                            "
                                            src="{{ card_product.featured_media | image_url: width: 533 }}"
                                            sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 130 | divided_by: 4 }}px, (min-width: 990px) calc((100vw - 130px) / 4), (min-width: 750px) calc((100vw - 120px) / 3), calc((100vw - 35px) / 2)"
                                            alt="{{ card_product.featured_media.alt | escape }}"
                                            class="motion-reduce"
                                            {% unless lazy_load == false %}
                                            loading="lazy"
                                            {% endunless %}
                                            width="{{ card_product.featured_media.width }}"
                                            height="{{ card_product.featured_media.height }}"
                                        >
                                    </div>
                                </div>
                                {% assign product_form_id = 'quick-add-' | append: section_id | append: card_product.id %}
                                      <button class="custom-quickview" data-handle="{{ card_product.handle }}">
                                      +
                                      </button>
                                        {% comment %} <button class="custom-quickview" data-handle="black-leather-bag" aria-label="Quick view">
          <span class="plus-icon">+</span>
        </button> {% endcomment %}
                            </div>
                            
                        </div>
                    </div>
                </li>
        {%- endcase -%}
    {%- endfor -%}
    </ul>
    <div class="quickview_popup">
        <div class="quickview_pro_inner">
          
            
        </div>
    </div>
</div>

{% schema %}
{
    "name": "t:sections.grid-products.name",
    "tag": "section",
    "class": "section section-grid-product",
    "blocks":[
        {
            "type": "product_select",
            "name": "t:sections.grid-products.settings.product.label",
            "settings": [{
                "type": "product",
                "id": "product",
                "label": "t:sections.grid-products.settings.product.label"
            }]
        }
    ],
    "settings": [
        {
          "type": "inline_richtext",
          "id": "heading",
          "label": "t:sections.grid-products.settings.heading.label"
        },
    ],
    "presets": [
        {
            "name": "t:sections.grid-products.name"
        }
    ]
}
{% endschema %}